SvmFit_all <- list()
ConfMat_all <- list()
num_fits = 41
for (j in 1:num_fits) {
indModel <- sample(indModel,replace = TRUE)
indTrain <- ind_all[1:(num_train)]
indTest <- ind_all[1:(num_train)]
inTrain <- createDataPartition(y=AllData_PC$classe, p = .7,list = FALSE)
trainData<- AllData_PC[inTrain,]
testData <- AllData_PC[-inTrain,]
svm_model <- svm(classe ~ ., data = trainData)
pred_svm <- predict(svm_model, testData[,-54])
ConfMat_all[[j]]=confusionMatrix(pred_svm,testData[,"classe"])
SvmFit_all[[j]] <-svm_model
}
mat_ind <- c("A","B","C","D","E")
mat_pred <- as.data.frame(matrix(nrow = dim(AllData_PC_cv)[1], ncol = num_fits))
for (j in 1:num_fits){
pred_svm <- predict(SvmFit_all[[j]], AllData_PC_cv[,-len_data])
mat_pred[,j] <- pred_svm
}
mat_cons <- as.data.frame(matrix(nrow = dim(AllData_PC_cv)[1], ncol = 5))
for (j in 1:5) {
a<- mat_pred == mat_ind[j]
mat_cons[,j] <- apply(a, 1, sum)
}
mn_exp <- (apply(mat_cons, 1,which.max))
confusionMatrix(mat_ind[mn_exp],AllData_PC_cv[,len_data])
exam_data<- data_test2[data_test2$user_name == "adelmo",]
predictors_PC_exam<- predict(preProc,exam_data[predictors])
mat_pred_exam <- as.data.frame(matrix(nrow = dim(exam_data)[1], ncol = num_fits))
for (j in 1:num_fits){
pred_svm <- predict(SvmFit_all[[j]], predictors_PC_exam)
mat_pred_exam[,j] <- pred_svm
}
library(caret)
library(tree)
library(rpart)
library(e1071)
setwd("C:/Users/Vivek/Desktop/coursera/PML_docs")
data_train<-read.csv('pml-training.csv')
data_test<-read.csv('pml-testing.csv')
ind_na = is.na(data_train[1,])
data_train2 <- as.data.frame(data_train[,ind_na==FALSE])
data_test2 <- as.data.frame(data_test[,ind_na==FALSE])
features<-names(data_train2)
roll_ind<-grep("_roll_",features,fixed = TRUE)
pitch_ind<-grep("_pitch_",features,fixed = TRUE)
picth_ind<-grep("_picth_",features,fixed = TRUE)
yaw_ind<-grep("_yaw_",features,fixed = TRUE)
# roll_arm, pitch_arm, yaw_arm
#roll_ind<-grep("roll_arm",features,fixed = TRUE)
#pitch_ind<-grep("pitch_arm",features,fixed = TRUE)
#yaw_aind<-grep("yaw_arm",features,fixed = TRUE)
data_train2 <- as.data.frame( data_train2[, -c( roll_ind, pitch_ind, yaw_ind, picth_ind ) ] )
data_train3 <- data_train2[,-c(1,3,4,5,6,7)]
data_usr<- split(data_train3,data_train3$user_name)
AllData<- data_usr$adelmo
ind_all_predictors<- 2:53
ind_bad_predictors<- ind_all_predictors[apply(AllData[,2:53],2,sd)==0]
if (length(ind_bad_predictors)!=0) {
ind_predictors <-ind_all_predictors[-ind_bad_predictors]
AllData<- AllData[,-ind_bad_predictors]
}
ind_bad_predictors
predictors<-names(AllData)
predictors<-predictors[2:(dim(AllData)[2]-1)]
predictors
names(AllData)
length(names(AllData))
ind_all <- sample(1:dim(AllData)[1])
num_model <- round(length(ind_all)*.8)
indModel <- ind_all[1:(num_model)]
data_training <- AllData[indModel,]
data_CV       <- AllData[-indModel,]
dim(data_training)[2]
predictors<-names(AllData)
predictors<-predictors[2:(dim(AllData)[2]-1)]
ind_all <- sample(1:dim(AllData)[1])
num_model <- round(length(ind_all)*.8)
indModel <- ind_all[1:(num_model)]
data_training <- AllData[indModel,]
data_CV       <- AllData[-indModel,]
preProc<-preProcess(data_training[predictors],method = "pca",thresh=0.99)
predictors_PC<- predict(preProc,data_training[predictors])
AllData_PC <- cbind(predictors_PC,classe = data_training[,dim(data_training)[2]])
predictors_PC_cv<- predict(preProc,data_CV[predictors])
AllData_PC_cv   <- cbind(predictors_PC_cv,classe = data_CV[,dim(data_training)[2]])
inTrain <- createDataPartition(y=AllData_PC$classe, p = .5,list = FALSE)
num_train = length(inTrain)
trainData<- AllData_PC[inTrain,]
testData <- AllData_PC[-inTrain,]
len_data<- dim(AllData_PC)[2]
## algorithm selection
svm_model <- svm(classe ~ ., data = trainData)
pred_svm <- predict(svm_model, testData[,-len_data])
confusionMatrix(pred_svm,testData[,"classe"])
rpart_model <- rpart(classe ~ ., data = trainData)
pred_rpart <- predict(rpart_model, testData[,-len_data],type = "class")
confusionMatrix(pred_rpart,testData[,"classe"])
tree_model <- tree(classe ~ ., data = trainData)
pred_tree <- predict(tree_model, testData[,-len_data],type = "class")
confusionMatrix(pred_tree,testData[,"classe"])
num_fits = 41
for (j in 1:num_fits) {
indModel <- sample(indModel,replace = TRUE)
indTrain <- ind_all[1:(num_train)]
indTest <- ind_all[1:(num_train)]
inTrain <- createDataPartition(y=AllData_PC$classe, p = .7,list = FALSE)
trainData<- AllData_PC[inTrain,]
testData <- AllData_PC[-inTrain,]
svm_model <- svm(classe ~ ., data = trainData)
pred_svm <- predict(svm_model, testData[,-dim(testData)[2]])
ConfMat_all[[j]]=confusionMatrix(pred_svm,testData[,"classe"])
SvmFit_all[[j]] <-svm_model
}
SvmFit_all <- list()
ConfMat_all <- list()
num_fits = 41
for (j in 1:num_fits) {
indModel <- sample(indModel,replace = TRUE)
indTrain <- ind_all[1:(num_train)]
indTest <- ind_all[1:(num_train)]
inTrain <- createDataPartition(y=AllData_PC$classe, p = .7,list = FALSE)
trainData<- AllData_PC[inTrain,]
testData <- AllData_PC[-inTrain,]
svm_model <- svm(classe ~ ., data = trainData)
pred_svm <- predict(svm_model, testData[,-dim(testData)[2]])
ConfMat_all[[j]]=confusionMatrix(pred_svm,testData[,"classe"])
SvmFit_all[[j]] <-svm_model
}
mat_ind <- c("A","B","C","D","E")
mat_pred <- as.data.frame(matrix(nrow = dim(AllData_PC_cv)[1], ncol = num_fits))
for (j in 1:num_fits){
pred_svm <- predict(SvmFit_all[[j]], AllData_PC_cv[,-len_data])
mat_pred[,j] <- pred_svm
}
mat_cons <- as.data.frame(matrix(nrow = dim(AllData_PC_cv)[1], ncol = 5))
for (j in 1:5) {
a<- mat_pred == mat_ind[j]
mat_cons[,j] <- apply(a, 1, sum)
}
mn_exp <- (apply(mat_cons, 1,which.max))
confusionMatrix(mat_ind[mn_exp],AllData_PC_cv[,len_data])
exam_data<- data_test2[data_test2$user_name == "adelmo",]
predictors_PC_exam<- predict(preProc,exam_data[predictors])
mat_pred_exam <- as.data.frame(matrix(nrow = dim(exam_data)[1], ncol = num_fits))
for (j in 1:num_fits){
pred_svm <- predict(SvmFit_all[[j]], predictors_PC_exam)
mat_pred_exam[,j] <- pred_svm
}
mat_pred_exam
exam_data[,1:4]
data_train<-read.csv('pml-training.csv')
data_test<-read.csv('pml-testing.csv')
ind_na = is.na(data_train[1,])
data_train2 <- as.data.frame(data_train[,ind_na==FALSE])
data_test2 <- as.data.frame(data_test[,ind_na==FALSE])
features<-names(data_train2)
roll_ind<-grep("_roll_",features,fixed = TRUE)
pitch_ind<-grep("_pitch_",features,fixed = TRUE)
picth_ind<-grep("_picth_",features,fixed = TRUE)
yaw_ind<-grep("_yaw_",features,fixed = TRUE)
# roll_arm, pitch_arm, yaw_arm
#roll_ind<-grep("roll_arm",features,fixed = TRUE)
#pitch_ind<-grep("pitch_arm",features,fixed = TRUE)
#yaw_aind<-grep("yaw_arm",features,fixed = TRUE)
data_train2 <- as.data.frame( data_train2[, -c( roll_ind, pitch_ind, yaw_ind, picth_ind ) ] )
data_train3 <- data_train2[,-c(1,3,4,5,6,7)]
data_usr<- split(data_train3,data_train3$user_name)
AllData<- data_usr$jeremy
ind_all_predictors<- 2:53
ind_bad_predictors<- ind_all_predictors[apply(AllData[,2:53],2,sd)==0]
if (length(ind_bad_predictors)!=0) {
ind_predictors <-ind_all_predictors[-ind_bad_predictors]
AllData<- AllData[,-ind_bad_predictors]
}
predictors<-names(AllData)
predictors<-predictors[2:(dim(AllData)[2]-1)]
ind_all <- sample(1:dim(AllData)[1])
num_model <- round(length(ind_all)*.8)
indModel <- ind_all[1:(num_model)]
data_training <- AllData[indModel,]
data_CV       <- AllData[-indModel,]
preProc<-preProcess(data_training[predictors],method = "pca",thresh=0.99)
predictors_PC<- predict(preProc,data_training[predictors])
AllData_PC <- cbind(predictors_PC,classe = data_training[,dim(data_training)[2]])
predictors_PC_cv<- predict(preProc,data_CV[predictors])
AllData_PC_cv   <- cbind(predictors_PC_cv,classe = data_CV[,dim(data_training)[2]])
inTrain <- createDataPartition(y=AllData_PC$classe, p = .5,list = FALSE)
num_train = length(inTrain)
trainData<- AllData_PC[inTrain,]
testData <- AllData_PC[-inTrain,]
len_data<- dim(AllData_PC)[2]
## algorithm selection
svm_model <- svm(classe ~ ., data = trainData)
pred_svm <- predict(svm_model, testData[,-len_data])
confusionMatrix(pred_svm,testData[,"classe"])
rpart_model <- rpart(classe ~ ., data = trainData)
pred_rpart <- predict(rpart_model, testData[,-len_data],type = "class")
confusionMatrix(pred_rpart,testData[,"classe"])
tree_model <- tree(classe ~ ., data = trainData)
pred_tree <- predict(tree_model, testData[,-len_data],type = "class")
confusionMatrix(pred_tree,testData[,"classe"])
SvmFit_all <- list()
ConfMat_all <- list()
num_fits = 41
for (j in 1:num_fits) {
indModel <- sample(indModel,replace = TRUE)
indTrain <- ind_all[1:(num_train)]
indTest <- ind_all[1:(num_train)]
inTrain <- createDataPartition(y=AllData_PC$classe, p = .7,list = FALSE)
trainData<- AllData_PC[inTrain,]
testData <- AllData_PC[-inTrain,]
svm_model <- svm(classe ~ ., data = trainData)
pred_svm <- predict(svm_model, testData[,-dim(testData)[2]])
ConfMat_all[[j]]=confusionMatrix(pred_svm,testData[,"classe"])
SvmFit_all[[j]] <-svm_model
}
mat_ind <- c("A","B","C","D","E")
mat_pred <- as.data.frame(matrix(nrow = dim(AllData_PC_cv)[1], ncol = num_fits))
for (j in 1:num_fits){
pred_svm <- predict(SvmFit_all[[j]], AllData_PC_cv[,-len_data])
mat_pred[,j] <- pred_svm
}
mat_cons <- as.data.frame(matrix(nrow = dim(AllData_PC_cv)[1], ncol = 5))
for (j in 1:5) {
a<- mat_pred == mat_ind[j]
mat_cons[,j] <- apply(a, 1, sum)
}
mn_exp <- (apply(mat_cons, 1,which.max))
confusionMatrix(mat_ind[mn_exp],AllData_PC_cv[,len_data])
exam_data<- data_test2[data_test2$user_name == "jeremy",]
predictors_PC_exam<- predict(preProc,exam_data[predictors])
mat_pred_exam <- as.data.frame(matrix(nrow = dim(exam_data)[1], ncol = num_fits))
for (j in 1:num_fits){
pred_svm <- predict(SvmFit_all[[j]], predictors_PC_exam)
mat_pred_exam[,j] <- pred_svm
}
mat_pred_exam
exam_data[,1:4]
cbind(exam_data$X,mat_pred_exam$V1)
mat_pred_exam$V1
as.data.frame(cbind(exam_data$X,mat_pred_exam$V1))
exam_data[,1:4]
mat_pred_exam
for (i in 1:8){print(c(exam_data$X[i],mat_pred_exam$V1[i]}
for (i in 1:8){print(c(exam_data$X[i],mat_pred_exam$V1[i])}
for (i in 1:8){print(c(exam_data$X[i],mat_pred_exam$V1[i]))}
exam_data$X[i]
exam_data$X
exam_data
for (i in 1:8){print(c(exam_data[i,2],mat_pred_exam$V1[i]))}
exam_data
exam_data[:,14]
exam_data[,1:4]
mat_pred_exam
unique(data_test2$user_name)
This report presents implentation of a machine learning based algorithm to classify barbell lifting data obtained from wearable sensor. First raw data was processed to discard non-kineamtic data and remove variables without varitions. This resulted in a data set that was different for different people. Further, the raw kinematic (position-orientation-accelration-velocity etc) data depends on how the sensor is worn. To avoid variations due to differences in how sensors were worn, and differences in individual devices, a principal component (PCA) followed by support vector machine (SVM) model was fit to data of each person. Collected data was split into training (40%), test (40%) and validation sets (20%). Cross-validation was perfomed using random sampling without replacements. To avoid issues of overfittig, a consensus based-model was implemented where 41 different models were fit to data, and consensus from these 41 models was used to identify the best solution. Overall, a good fit to data was observed (>98% accuracy) for all subjects, and all 20 final test cases were predicted correctly by the algorithm.
```
SuppressWarningMessage(library(caret))
ind_na = is.na(data_train[1,])
data_train2 <- as.data.frame(data_train[,ind_na==FALSE])
data_test2 <- as.data.frame(data_test[,ind_na==FALSE])
features<-names(data_train2)
roll_ind<-grep("_roll_",features,fixed = TRUE)
pitch_ind<-grep("_pitch_",features,fixed = TRUE)
picth_ind<-grep("_picth_",features,fixed = TRUE)
yaw_ind<-grep("_yaw_",features,fixed = TRUE)
# roll_arm, pitch_arm, yaw_arm
#roll_ind<-grep("roll_arm",features,fixed = TRUE)
#pitch_ind<-grep("pitch_arm",features,fixed = TRUE)
#yaw_aind<-grep("yaw_arm",features,fixed = TRUE)
data_train2 <- as.data.frame( data_train2[, -c( roll_ind, pitch_ind, yaw_ind, picth_ind ) ] )
data_train3 <- data_train2[,-c(1,3,4,5,6,7)]
data_usr<- split(data_train3,data_train3$user_name)
AllData<- data_usr$pedro
ind_all_predictors<- 2:53
ind_bad_predictors<- ind_all_predictors[apply(AllData[,2:53],2,sd)==0]
ind_bad_predictors
ind_na = is.na(data_train[1,])
data_train2 <- as.data.frame(data_train[,ind_na==FALSE])
data_test2 <- as.data.frame(data_test[,ind_na==FALSE])
features<-names(data_train2)
roll_ind<-grep("_roll_",features,fixed = TRUE)
pitch_ind<-grep("_pitch_",features,fixed = TRUE)
picth_ind<-grep("_picth_",features,fixed = TRUE)
yaw_ind<-grep("_yaw_",features,fixed = TRUE)
# roll_arm, pitch_arm, yaw_arm
#roll_ind<-grep("roll_arm",features,fixed = TRUE)
#pitch_ind<-grep("pitch_arm",features,fixed = TRUE)
#yaw_aind<-grep("yaw_arm",features,fixed = TRUE)
data_train2 <- as.data.frame( data_train2[, -c( roll_ind, pitch_ind, yaw_ind, picth_ind ) ] )
data_train3 <- data_train2[,-c(1,3,4,5,6,7)]
data_usr<- split(data_train3,data_train3$user_name)
AllData<- data_usr$jeremy
ind_all_predictors<- 2:53
ind_bad_predictors<- ind_all_predictors[apply(AllData[,2:53],2,sd)==0]
ind_bad_predictors
AllData[1:2,ind_bad_predictors]
ind_na = is.na(data_train[1,])
data_train2 <- as.data.frame(data_train[,ind_na==FALSE])
data_test2 <- as.data.frame(data_test[,ind_na==FALSE])
features<-names(data_train2)
roll_ind<-grep("_roll_",features,fixed = TRUE)
pitch_ind<-grep("_pitch_",features,fixed = TRUE)
picth_ind<-grep("_picth_",features,fixed = TRUE)
yaw_ind<-grep("_yaw_",features,fixed = TRUE)
# roll_arm, pitch_arm, yaw_arm
#roll_ind<-grep("roll_arm",features,fixed = TRUE)
#pitch_ind<-grep("pitch_arm",features,fixed = TRUE)
#yaw_aind<-grep("yaw_arm",features,fixed = TRUE)
data_train2 <- as.data.frame( data_train2[, -c( roll_ind, pitch_ind, yaw_ind, picth_ind ) ] )
data_train3 <- data_train2[,-c(1,3,4,5,6,7)]
data_usr<- split(data_train3,data_train3$user_name)
AllData<- data_usr$pedro
ind_all_predictors<- 2:53
ind_bad_predictors<- ind_all_predictors[apply(AllData[,2:53],2,sd)==0]
ind_na = is.na(data_train[1,])
data_train2 <- as.data.frame(data_train[,ind_na==FALSE])
data_test2 <- as.data.frame(data_test[,ind_na==FALSE])
features<-names(data_train2)
roll_ind<-grep("_roll_",features,fixed = TRUE)
pitch_ind<-grep("_pitch_",features,fixed = TRUE)
picth_ind<-grep("_picth_",features,fixed = TRUE)
yaw_ind<-grep("_yaw_",features,fixed = TRUE)
# roll_arm, pitch_arm, yaw_arm
#roll_ind<-grep("roll_arm",features,fixed = TRUE)
#pitch_ind<-grep("pitch_arm",features,fixed = TRUE)
#yaw_aind<-grep("yaw_arm",features,fixed = TRUE)
data_train2 <- as.data.frame( data_train2[, -c( roll_ind, pitch_ind, yaw_ind, picth_ind ) ] )
data_train3 <- data_train2[,-c(1,3,4,5,6,7)]
data_usr<- split(data_train3,data_train3$user_name)
AllData<- data_usr$pedro
ind_all_predictors<- 2:53
ind_bad_predictors<- ind_all_predictors[apply(AllData[,2:53],2,sd)==0]
AllData[1:2,ind_bad_predictors]
ind_na = is.na(data_train[1,])
data_train2 <- as.data.frame(data_train[,ind_na==FALSE])
data_test2 <- as.data.frame(data_test[,ind_na==FALSE])
features<-names(data_train2)
roll_ind<-grep("_roll_",features,fixed = TRUE)
pitch_ind<-grep("_pitch_",features,fixed = TRUE)
picth_ind<-grep("_picth_",features,fixed = TRUE)
yaw_ind<-grep("_yaw_",features,fixed = TRUE)
# roll_arm, pitch_arm, yaw_arm
#roll_ind<-grep("roll_arm",features,fixed = TRUE)
#pitch_ind<-grep("pitch_arm",features,fixed = TRUE)
#yaw_aind<-grep("yaw_arm",features,fixed = TRUE)
data_train2 <- as.data.frame( data_train2[, -c( roll_ind, pitch_ind, yaw_ind, picth_ind ) ] )
data_train3 <- data_train2[,-c(1,3,4,5,6,7)]
data_usr<- split(data_train3,data_train3$user_name)
AllData<- data_usr$carlitos
ind_all_predictors<- 2:53
ind_bad_predictors<- ind_all_predictors[apply(AllData[,2:53],2,sd)==0]
ind_bad_predictors
ind_na = is.na(data_train[1,])
data_train2 <- as.data.frame(data_train[,ind_na==FALSE])
data_test2 <- as.data.frame(data_test[,ind_na==FALSE])
features<-names(data_train2)
roll_ind<-grep("_roll_",features,fixed = TRUE)
pitch_ind<-grep("_pitch_",features,fixed = TRUE)
picth_ind<-grep("_picth_",features,fixed = TRUE)
yaw_ind<-grep("_yaw_",features,fixed = TRUE)
# roll_arm, pitch_arm, yaw_arm
#roll_ind<-grep("roll_arm",features,fixed = TRUE)
#pitch_ind<-grep("pitch_arm",features,fixed = TRUE)
#yaw_aind<-grep("yaw_arm",features,fixed = TRUE)
data_train2 <- as.data.frame( data_train2[, -c( roll_ind, pitch_ind, yaw_ind, picth_ind ) ] )
data_train3 <- data_train2[,-c(1,3,4,5,6,7)]
data_usr<- split(data_train3,data_train3$user_name)
AllData<- data_usr$eurico
ind_all_predictors<- 2:53
ind_bad_predictors<- ind_all_predictors[apply(AllData[,2:53],2,sd)==0]
ind_bad_predictors
ind_na = is.na(data_train[1,])
data_train2 <- as.data.frame(data_train[,ind_na==FALSE])
data_test2 <- as.data.frame(data_test[,ind_na==FALSE])
features<-names(data_train2)
roll_ind<-grep("_roll_",features,fixed = TRUE)
pitch_ind<-grep("_pitch_",features,fixed = TRUE)
picth_ind<-grep("_picth_",features,fixed = TRUE)
yaw_ind<-grep("_yaw_",features,fixed = TRUE)
# roll_arm, pitch_arm, yaw_arm
#roll_ind<-grep("roll_arm",features,fixed = TRUE)
#pitch_ind<-grep("pitch_arm",features,fixed = TRUE)
#yaw_aind<-grep("yaw_arm",features,fixed = TRUE)
data_train2 <- as.data.frame( data_train2[, -c( roll_ind, pitch_ind, yaw_ind, picth_ind ) ] )
data_train3 <- data_train2[,-c(1,3,4,5,6,7)]
data_usr<- split(data_train3,data_train3$user_name)
AllData<- data_usr$adelmo
ind_all_predictors<- 2:53
ind_bad_predictors<- ind_all_predictors[apply(AllData[,2:53],2,sd)==0]
ind_bad_predictors
AllData[1:2,ind_bad_predictors]
setwd("C:/Users/Vivek/Desktop/coursera/PML_docs/reportML")
preProc
preProc$sdev
summary(preProc)
preProc$std
names(preProc)
preProc$pcaComp
summary(preProc)$pcaComp
pc_all<-princomp(data_training[predictors])
pc_all$sdev
pc_all$sdev[1]/sum(pc_all$sdev)
sum(pc_all$sdev[1:2])/sum(pc_all$sdev)
sd_pc= vector()
for (i in 1:30) {sd_pc[i] = sum(pc_all$sdev[1:2])/sum(pc_all$sdev)}
sd_pc
for (i in 1:30) {sd_pc[i] = sum(pc_all$sdev[1:i])/sum(pc_all$sdev)}
sd_pc
plot(sd_pc)
sd_pc= vector()
for (i in 1:30) {sd_pc[i] = sum(pc_all$sdev[1:i])/sum(pc_all$sdev)}
plot(sd_pc,type="l",
xlab="number of PCs",
ylab="Covariance explained by PCs")
plot(preProc$PC1,preProc$PC1,col=data_training$classe)
plot(preProc$PC1,preProc$PC2,col=data_training$classe)
preProc$PC1
preProc<-preProcess(data_training[predictors],method = "pca",thresh=0.99)
plot(preProc$PC1,preProc$PC2,col=data_training$classe)
preProc
plot(preProc$PC1,preProc$PC2,col=data_training$classe)
names(preProc)
names(preProcess)
preProc<-preProcess(data_training[predictors],method = "pca",thresh=0.99)
names(preProc)
predictors_PC<- predict(preProc,data_training[predictors])
names(predictors_pc)
names(predictors_PC)
plot(predictors$PC1,predictors$PC2,col=data_training$classe)
head(predictors_PC)
plot(predictors$PC1,predictors_PC$PC2,col=data_training$classe)
plot(predictors_PC$PC1,predictors_PC$PC2,col=data_training$classe)
plot(predictors_PC$PC2,predictors_PC$PC3,col=data_training$classe)
plot(predictors_PC$PC3,predictors_PC$PC4,col=data_training$classe)
predictors_PC
pc_all<-princomp(data_training[predictors])
preProc<-preProcess(data_training[predictors],method = "pca",thresh=0.9)
preProc
par(mfrow=c(2,2))
plot(predictors_PC$PC1,predictors_PC$PC2,col=data_training$classe,
xlab ="PC1",ylab="PC2")
plot(predictors_PC$PC1,predictors_PC$PC2,col=data_training$classe,
xlab ="PC2",ylab="PC3")
plot(predictors_PC$PC1,predictors_PC$PC2,col=data_training$classe,
xlab ="PC3",ylab="PC4")
plot(predictors_PC$PC1,predictors_PC$PC2,col=data_training$classe,
xlab ="PC4",ylab="PC5")
par(mfrow=c(2,2))
plot(predictors_PC$PC1,predictors_PC$PC2,col=data_training$classe,
xlab ="PC1",ylab="PC2")
plot(predictors_PC$PC2,predictors_PC$PC3,col=data_training$classe,
xlab ="PC2",ylab="PC3")
plot(predictors_PC$PC3,predictors_PC$PC4,col=data_training$classe,
xlab ="PC3",ylab="PC4")
plot(predictors_PC$PC4,predictors_PC$PC5,col=data_training$classe,
xlab ="PC4",ylab="PC5")
plot(predictors_PC$PC1,predictors_PC$PC2,col=data_training$classe,
xlab ="PC1",ylab="PC2")
plot(predictors_PC$PC3,predictors_PC$PC4,col=data_training$classe,
xlab ="PC3",ylab="PC4")
plot(predictors_PC$PC5,predictors_PC$PC6,col=data_training$classe,
xlab ="PC3",ylab="PC4")
plot(predictors_PC$PC7,predictors_PC$PC8,col=data_training$classe,
xlab ="PC4",ylab="PC5")
plot(predictors_PC$PC1,predictors_PC$PC2,col=data_training$classe,
xlab ="PC1",ylab="PC2")
plot(predictors_PC$PC3,predictors_PC$PC4,col=data_training$classe,
xlab ="PC3",ylab="PC4")
plot(predictors_PC$PC5,predictors_PC$PC6,col=data_training$classe,
xlab ="PC5",ylab="PC6")
plot(predictors_PC$PC7,predictors_PC$PC8,col=data_training$classe,
xlab ="PC7",ylab="PC8")
mn_exp <- (apply(mat_cons, 1,which.max))
max_exp <- (apply(mat_cons, 1,which.max))
hist(max_exp)
mn_exp
mat_cons
max(mat_cons,2)
max(mat_cons,1)
sum(mat_cons)
mat_cons[mat_cons==41]=0
sum(mat_cons)
sum(mat_cons==0)
dim(mat_cons)
mn_exp <- (apply(mat_cons, 1,which.max))
sum(mat_cons==41)
mat_cons <- as.data.frame(matrix(nrow = dim(AllData_PC_cv)[1], ncol = 5))
for (j in 1:5) {
a<- mat_pred == mat_ind[j]
mat_cons[,j] <- apply(a, 1, sum)
}
mn_exp <- (apply(mat_cons, 1,which.max))
mat_cons
sum(mat_cons==41)
apply(mat_cons,1,max)
ratio_sel<-apply(mat_cons,1,max)/41
hist<-ratio_sel
ratio_sel
hist(ratio_sel)
hist(ratio_sel[ratio_sel!=`])
)
""
source('C:/Users/Vivek/Desktop/coursera/PML_docs/analysis_file_pca_svm_pedro.R')
afa
''
`
`
)
